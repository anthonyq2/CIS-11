- [ ] 3.1.11 Section Review, Questions 1, 2, 3, 4
1. Decimal: -35d
   Hex: DDh
   Oct: 335o
   Bin: 11011101b
2. No, there has to be a 0 in front.
3. No, multiplication and division have equal precedence.
4. 40 MOD (2 * 3) + (4 - 2)/3 = 5

- [ ] 3.2.4 Section Review, Questions 4, 5
4. The eax register holds the sum.
5. INVOKE ExitProcess,0 is what halts the program.

- [ ] 3.3.3 Section Review, Questions 1, 2, 3, 4
1. The assembler produces an object file. It can also produce a listing file.
2. True.
3. True.
4. The loader.

- [ ] 3.4.13 Section Review, Questions 1, 2, 3, 4, 5
1. var SWORD
2. var BYTE
3. var SBYTE
4. var QWORD
5. SDWORD
- [ ] 3.5.5 Section Review Question 3
3. ArraySize = ($ - myArray)

- [ ] 3.9.1 Short Answer, Questions 4, 5, 6, 25
4. Assembler languague is not quite correct because the assembler is the actual program that translates assembly language 
code into machine code.
5. Big endian is when the most significant bit is placed at the lowest address and little endian is when the least significant bit
is placed at the lowest address. The terms come from a reference to a book by Jonathan titled Gulliver's Travels.
6. Because if you're using a constant you only have to change one instance of it and not a bunch of them scattered throughout the code.
25. SDWORD.

- [ ] 3.9.2 Algorithm Workbench, Questions 4, 7, 13
4. DWORD can be assigned a negative value, but it does not store that value at runtime. This shows that the assembler does not type check
for negatives.
7. array DWORD 120 DUP(?)
13. testString BYTE 500 DUP("TEST")

- [ ] 3.10 Programming Exercises, Pick any 1 exercise
1. 
ExitProcess proto
.data
sum1 qword 0
sum2 qword 0
.code
main proc
   mov  eax, 5
   mov  ebx, 6
   add  eax, ebx
   mov sum1, eax
   
   mov ecx, 4
   mov edx, 3
   add ecx, edx
   mov sum2, ecx
   
   mov eax, sum1
   sub eax, sum2
   call ExitProcess
main endp
end
